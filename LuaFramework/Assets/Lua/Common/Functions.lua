---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/14 0014 14:57
---

-- Lua中的继承
function Inherit(tbParent,tbChild)
    if not tbParent then
        local o = tbChild or {}
        setmetatable(o,{__index=o})
        return o
    else
        local tb = tbChild or {}
        tbParent.__index=tbParent
        setmetatable(tb, tbParent)
        tb.super=setmetatable({}, tbParent)
        return tb;
    end
end

--重新require一个lua文件，替代系统文件。
function reimport(name)
    local package = package
    package.loaded[name] = nil
    package.preload[name] = nil
    return require(name)
end

function log(data)
    Log.l(data);
end

function warn(data)
    Log.warn(data);
end

function error(data)
    Log.error(data);
end


function DelTableByKey(tb,key)
    if type(tb) ~= "table" then
        error("Delete value in table,the tb is not table")
    else
        if tb[key] then
            local i=1
            for k,v in pairs(tb) do
                if k == key then
                    break
                end
                i=i+1
            end
            table.remove(tb,i)
        end
    end
end


---@return UnityEngine.GameObject
function loadUI(cfg,parent)
    local prefab = resMgr.LoadUI(cfg.view);
    local root = parent;
    if root == nil then
        root = UIManager.uiNode;
    end
    local go = Instantiate(prefab,root)
    local canvas = go:GetComponent("Canvas");
    if canvas == nil then
        canvas = go:AddComponent(typeof(Canvas));
        go:AddComponent(typeof(GraphicRaycaster));
    end


    local uiInfo = go:AddComponent(typeof(UIInfo));
    uiInfo.View = cfg.name;
    return go;
end

function Instantiate(prefab,parent)
    local gameObject = GameObject.Instantiate(prefab);
    gameObject.name = prefab.name;
    local transform = gameObject.transform;
    transform:SetParent(parent,false)
    transform.localScale = Vector3.one;
    local recTransform = transform:GetComponent("RectTransform")
    recTransform.anchoredPosition3D = Vector3.New(0, 0, 0)
    recTransform.sizeDelta = Vector2.New(0, 0)
    transform.localRotation = Quaternion.identity
    return gameObject;
end

function dispatchEvent(eName,...)
    Game.GlobalEvent:DispatchEvent(eName,...);
end


function FinTrans(sPath, pFrom)
    local trans = pFrom;
    if sPath and #sPath > 0 then
        trans = trans:Find(sPath)
    end;
    if not trans then
        return nil
    end;
    return trans;
end



