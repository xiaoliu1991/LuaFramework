---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/17 0017 14:46
---

GameEvent = {safe=true}
GameEvent.__index = GameEvent
function GameEvent:New()
    local store = nil
    if store then return store end
    local o =  {}
    setmetatable(o, self)
    self.__index = self
    store = o
    self.m_listeners = {}
    self.m_rmList ={}
    return o
end

local function CreateEvent(fListener, pObj)
    local st = {func = fListener, obj = pObj,bUseOnce =false}
    setmetatable(st, {})
    return st
end

function GameEvent:AddEvent(sEventName,fListener,pObj,bIsUseOnce)
    if type(sEventName) == "number" then
        sEventName = tostring(sEventName)
    end
    if type(sEventName) ~= "string" then
        warn("The EventManager dispatchEvent must be string , current Type:"..type(sEventName))
        return
    end
    -- 先看看事件是否存在
    local index = 1
    if self.m_listeners[sEventName] == nil then
        self.m_listeners[sEventName] = {lock = false}
        self.m_rmList[sEventName]={}
    else
        local existIndex = self:GetEventIndex(sEventName,fListener,pObj)
        if existIndex ~= -1 then
            log("Same event "..sEventName.." Exist,Can't add Two Times,Please check it")
            return
        end
        index = #self.m_listeners[sEventName] + 1
    end

    self.m_listeners[sEventName][index] = CreateEvent(fListener,pObj,bIsUseOnce)
end

function GameEvent:RemoveEvent(sEventName,fListener,pObj)
    if type(sEventName) == "number" then
        sEventName = tostring(sEventName)
    end
    if self.m_listeners[sEventName] == nil then
        return
    end
    for i=1,#self.m_listeners[sEventName] do
        if self.m_listeners[sEventName][i].func == fListener and self.m_listeners[sEventName][i].obj == pObj then
            self.m_listeners[sEventName][i].isStop=true
            if self.m_listeners[sEventName].lock then
                table.insert(self.m_rmList[sEventName],{func = fListener})
            else
                table.remove(self.m_listeners[sEventName],i)
            end
            break
        end
    end
    log("removeEvent ======"..sEventName.." has event Count::".. #self.m_listeners[sEventName]);
end

function GameEvent:RemoveAllEvent(sEventName)
    if type(sEventName) == "number" then
        sEventName=tostring(sEventName)
    end
    if self.m_listeners[sEventName] == nil then
        return
    end
    self.m_listeners[sEventName] = nil
end


function GameEvent:DispatchEvent(sEventName,...)
    if type(sEventName) == "number" then
        sEventName=tostring(sEventName)
    end
    if type(sEventName) ~= "string" then
        warn("The EventManager dispatchEvent must be string , current Type:"..type(sEventName))
        return
    end
    if not self.m_listeners then
        log("m_listeners =======is null=========="..sEventName)
    end
    if self.m_listeners[sEventName] == nil then
        warn("message "..sEventName.." has no Listener")
        return
    end
    local flag 	= true
    local msg = nil
    local args = {...}
    self.m_listeners[sEventName].lock = true

    for k=1, #self.m_listeners[sEventName] do
        local v=self.m_listeners[sEventName][k]
        if nil == v.obj then
            local func = function() v.func(unpack(args)) end
            flag, msg = xpcall(func, traceback)
        else
            local func = function() v.func(v.obj, unpack(args)) end
            flag, msg = xpcall(func, traceback)
        end

        if not flag then
            if self.safe then
                table.remove(self.m_listeners[sEventName],k)
            end
            self.m_listeners[sEventName].lock = false
            error(msg)
        end

        if v.bUseOnce then
            table.remove(self.m_listeners[sEventName],k)
        end
    end

    local rv=self.m_rmList[sEventName]
    if rv then
        for n=1,#rv do
            local v = self.m_listeners[sEventName]
            for i=1,#v do
                if v[i].func == rv[n].func then
                    table.remove(self.m_listeners[sEventName], i)
                    break
                end
            end
        end
    end
    self.m_listeners[sEventName].lock = false
    DelTableByKey(self.m_rmList,sEventName)
end

function GameEvent:HasEvent(sEventName)
    if self.m_listeners[sEventName] then
        return true
    else
        return false
    end
end

function GameEvent:GetEventIndex(sEventName,fListener,pObj)
    if self.m_listeners[sEventName] == nil then
        return -1
    end
    for i=1,#self.m_listeners[sEventName] do
        if self.m_listeners[sEventName][i].obj then
            if self.m_listeners[sEventName][i].func == fListener and self.m_listeners[sEventName][i].obj == pObj then
                return i
            end
        else
            if self.m_listeners[sEventName][i].func == fListener then
                return i
            end
        end
    end
    return -1
end

function GameEvent:ClearEvent()
    self.m_listeners={}
    self.m_rmList={}
    self.safe = true
end