---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2019/5/14 0014 16:30
---

---@class UIManager
UIManager = setclass("UIManager")
local this = UIManager;

--桟UI列表
this.openUIList = {};
this.stackUIList = {};
--上层窗口
this.openWeidgetList = {};

function this.methods:init(...)
    local gameObj = GameObject.Find("UIRoot");
    this.uiRoot = gameObj;
    this.root = gameObj.transform:Find("Root");
    this.uiNode = gameObj.transform:Find("Root/UINode");
    this.fixedNode = gameObj.transform:Find("Root/FixedNode");
    this.camera = gameObj.transform:Find("UICamera"):GetComponent("Camera");
end

function this:OpenUI(id)
    local ui = nil;
    for i = 1, #this.openUIList do
        if(this.openUIList[i].cfg.id == id) then
            ui = this.openUIList[i];
            break;
        end
    end

    if ui ~= nil then
        error(ui.cfg.name .. " 已经打开了！！！")
        return
    end

    local cfg = UIConfig[id];
    if cfg == nil then
        return
    end

    local ui = reimport(cfg.view);
    local go = loadUI(cfg);

    local canvas = go:GetComponent("Canvas");
    canvas.overrideSorting = true;
    canvas.sortingOrder = id * 100;

    ui:new(go.transform,cfg);
    go:AddComponent(typeof(BaseUI));

    if cfg.type == UIType.FullType then
        if #this.openUIList > 0 then
            GameObject.Destroy(this.openUIList[#this.openUIList].go);
            this.openUIList[#this.openUIList].go = nil;
            this.openUIList[#this.openUIList].view = nil;
            this.stackUIList[#this.stackUIList+1] = this.openUIList[#this.openUIList];
            table.remove(this.openUIList,#this.openUIList);
        end
    end

    local cache = {};
    cache.cfg = cfg;
    cache.go = go;
    cache.view = ui;

    this.openUIList[#this.openUIList +1] = cache;
    warn(cfg.name .. "  Open")
end

function this:CloseUI(id)
    local ui = nil;
    local index = 1;
    for i = 1, #this.openUIList do
        if(this.openUIList[i].cfg.id == id) then
            ui = this.openUIList[i];
            index = i;
            break;
        end
    end

    if ui ~= nil then
        GameObject.Destroy(ui.go);
        table.remove(this.openUIList,index);
        warn(ui.cfg.name .. "  Close");
        if ui.cfg.type == UIType.FullType then
            if #this.stackUIList > 0 then
                local rId = this.stackUIList[1].cfg.id;
                table.remove(this.stackUIList,1);
                this:OpenUI(rId)
            end
        end
    end
end

--子窗口打开方法
function this:OpenChildView(cfg,parent,parentCfg)
    local list = this.openWeidgetList[parentCfg.id];
    if list ~= nil and #list > 0 then
        for _, v in ipairs(list) do
            if v.cfg.id == cfg.id then
                error(uiGo.cfg.name .. " 已经打开了！！！")
                return
            end
        end
    else
        this.openWeidgetList[parentCfg.id] = {};
    end

    local ui = reimport(cfg.view);
    local go = loadUI(cfg,parent);
    ui:new(go.transform,cfg,parentCfg);
    go:AddComponent(typeof(BaseUI));


    local canvas = go:GetComponent("Canvas");
    canvas.overrideSorting = true;
    canvas.sortingOrder = parentCfg.id * 100  + #this.openWeidgetList[parentCfg.id]+1 * 20;

    local cache = {};
    cache.cfg = cfg;
    cache.go = go;
    cache.view = ui;
    cache.parent = parent;

    table.insert(this.openWeidgetList[parentCfg.id],cache);
    warn(cfg.name .. "  Open")
end


function this:CloseChildView(cfg,parentCfg)
    local list = this.openWeidgetList[parentCfg.id];

    if  list ~= nil and #list > 0 then
        local key = 0;
        for k, v in ipairs(list) do
            if v.cfg.id == cfg.id then
                warn(v.cfg.name .. "  Close");
                GameObject.Destroy(v.go);
                key = k;
                break
            end
        end

        if key > 0 then
            table.remove(this.openWeidgetList[parentCfg.id],key);
        end
    end
end


return this;